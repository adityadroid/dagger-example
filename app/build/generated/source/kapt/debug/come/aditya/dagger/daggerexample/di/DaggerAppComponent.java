// Generated by Dagger (https://dagger.dev).
package come.aditya.dagger.daggerexample.di;

import android.app.Application;
import come.aditya.dagger.daggerexample.BaseApplication;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.Preconditions;
import java.util.Collections;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private DaggerAppComponent(Application application) {

  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>emptyMap(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);}

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }
}
