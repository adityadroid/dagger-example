// Generated by Dagger (https://dagger.dev).
package com.aditya.daggerexample.di;

import android.app.Application;
import com.aditya.daggerexample.AuthActivity;
import com.aditya.daggerexample.AuthActivity_MembersInjector;
import com.aditya.daggerexample.BaseApplication;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory> authActivitySubcomponentFactoryProvider;

  private DaggerAppComponent(Application application) {

    initialize(application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(AuthActivity.class, (Provider) authActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final Application application) {
    this.authActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory get() {
        return new AuthActivitySubcomponentFactory();}
    };
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);}

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class AuthActivitySubcomponentFactory implements ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent create(
        AuthActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AuthActivitySubcomponentImpl(arg0);
    }
  }

  private final class AuthActivitySubcomponentImpl implements ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent {
    private AuthActivitySubcomponentImpl(AuthActivity arg0) {

    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);}

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      AuthActivity_MembersInjector.injectSomeString(instance, AppModule_SomeStringFactory.someString());
      return instance;
    }
  }
}
