// Generated by Dagger (https://dagger.dev).
package com.aditya.daggerexample.di;

import android.app.Application;
import android.graphics.drawable.Drawable;
import androidx.lifecycle.ViewModel;
import com.aditya.daggerexample.BaseApplication;
import com.aditya.daggerexample.di.auth.AuthModule_ProvidesAuthApi$app_debugFactory;
import com.aditya.daggerexample.di.network.auth.AuthApi;
import com.aditya.daggerexample.ui.auth.AuthActivity;
import com.aditya.daggerexample.ui.auth.AuthActivity_MembersInjector;
import com.aditya.daggerexample.ui.auth.AuthViewModel;
import com.aditya.daggerexample.ui.auth.AuthViewModel_Factory;
import com.aditya.daggerexample.viewmodels.ViewModelProviderFactory;
import com.bumptech.glide.RequestManager;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final Application application;

  private Provider<ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory> authActivitySubcomponentFactoryProvider;

  private DaggerAppComponent(Application applicationParam) {
    this.application = applicationParam;
    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(AuthActivity.class, (Provider) authActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private Drawable getDrawable() {
    return AppModule_ProvideAppDrawableFactory.provideAppDrawable(application);}

  private RequestManager getRequestManager() {
    return AppModule_ProvideGlideInstanceFactory.provideGlideInstance(application, AppModule_ProvideRequestOptionsFactory.provideRequestOptions());}

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.authActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory get() {
        return new AuthActivitySubcomponentFactory();}
    };
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);}

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class AuthActivitySubcomponentFactory implements ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent create(
        AuthActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AuthActivitySubcomponentImpl(arg0);
    }
  }

  private final class AuthActivitySubcomponentImpl implements ActivityBuildersModule_ContributesAuthActivity.AuthActivitySubcomponent {
    private Provider<AuthApi> providesAuthApi$app_debugProvider;

    private Provider<AuthViewModel> authViewModelProvider;

    private AuthActivitySubcomponentImpl(AuthActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(AuthViewModel.class, (Provider) authViewModelProvider);}

    private ViewModelProviderFactory getViewModelProviderFactory() {
      return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

    private AuthApi getAuthApi() {
      return AuthModule_ProvidesAuthApi$app_debugFactory.providesAuthApi$app_debug(AppModule_ProvideRetrofitInstanceFactory.provideRetrofitInstance());}

    private AuthViewModel getAuthViewModel() {
      return new AuthViewModel(getAuthApi());}

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivity arg0) {
      this.providesAuthApi$app_debugProvider = AuthModule_ProvidesAuthApi$app_debugFactory.create(AppModule_ProvideRetrofitInstanceFactory.create());
      this.authViewModelProvider = AuthViewModel_Factory.create(providesAuthApi$app_debugProvider);
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);}

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      AuthActivity_MembersInjector.injectDrawable(instance, DaggerAppComponent.this.getDrawable());
      AuthActivity_MembersInjector.injectRequestManager(instance, DaggerAppComponent.this.getRequestManager());
      AuthActivity_MembersInjector.injectProviderFactory(instance, getViewModelProviderFactory());
      AuthActivity_MembersInjector.injectAuthViewModel(instance, getAuthViewModel());
      return instance;
    }
  }
}
